# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2017-08-24 18:22
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type', models.SmallIntegerField(choices=[(0, 'Agent'), (1, 'Client')], default=1)),
                ('name', models.CharField(blank=True, max_length=255, verbose_name='Name of User')),
                ('zipcode', models.CharField(blank=True, max_length=10, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=16, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+2777181947'. Up to 15 digits allowed.", regex='^\\+?\\d{9,15}$')])),
                ('annual_income', models.FloatField(blank=True, null=True)),
                ('purchase_step', models.SmallIntegerField(choices=[(0, 'Decide and Prepare'), (1, 'Evaluate and Offer'), (2, 'Home owner benefits')], default=0)),
                ('status', models.SmallIntegerField(choices=[(0, 'Single'), (1, 'Married with No Kids'), (2, 'Married with No School Kids'), (3, 'Married with School Kids'), (4, 'Investor')], default=0)),
                ('firsthome', models.BooleanField(default=True)),
                ('house_type', models.SmallIntegerField(choices=[(0, 'Single Family'), (1, 'Townhome'), (2, 'Condominium'), (3, 'New Construction'), (4, 'Other Options'), (5, 'Flexible')], null=True)),
                ('house_age', models.SmallIntegerField(choices=[(0, 'New Construction'), (1, 'One to Fifteen'), (2, 'Fifteen to thirty'), (3, 'Over thirty')], null=True)),
                ('house_cond', models.SmallIntegerField(choices=[(0, 'Updated'), (1, 'Slightly dated'), (2, 'Fixer Upper')], null=True)),
                ('budget', models.FloatField(blank=True, null=True)),
                ('current_rent', models.FloatField(blank=True, null=True)),
                ('how_soon', models.SmallIntegerField(choices=[(0, '0-3 Months'), (1, '3-6 Months'), (2, '6-12 Months'), (3, '12+ Months'), (4, 'Skip')], null=True)),
                ('language', models.SmallIntegerField(choices=[(0, 'English'), (1, 'Spanish'), (2, 'Mandarin/Cantonese'), (3, 'Hindi'), (4, 'Other')], default=0)),
                ('credit_score', models.SmallIntegerField(choices=[(0, '780+'), (1, '740-779'), (2, '700-739'), (3, '650-699'), (4, '600-649'), (5, '<599')], null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60)),
                ('state', models.CharField(max_length=40)),
            ],
        ),
        migrations.CreateModel(
            name='PasswordReset',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uuid', models.CharField(default=uuid.uuid1, max_length=64, verbose_name='Activation key')),
                ('date_created', models.DateField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='preferred_city',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='users.City'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
    ]
